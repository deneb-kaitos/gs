import util from 'node:util';
import {
  randomUUID,
} from 'node:crypto';
import {
  createClient,
} from 'redis';
import {
  config,
} from 'dotenv';
import {
  boolFromString,
} from '@deneb-kaitos/helpers/boolFromString.mjs';
import {
  describe,
  before,
  after,
  it,
} from 'mocha';
import {
  expect,
} from 'chai';

config({
  path: 'specs/.env',
});

const sinkStream = `${process.env.REDIS_SINK_STREAM}:${randomUUID()}`;

describe('redis', () => {
  globalThis.redisOpts = null;
  globalThis.redisClientConfig = null;
  globalThis.debuglog = null;
  global.redisKeysToClean = [];

  before(() => {
    globalThis.debuglog = util.debuglog('ureg:specs');

    global.redisKeysToClean.push(sinkStream);

    globalThis.redisOpts = {
      host: process.env.REDIS_HOST,
      port: parseInt(process.env.REDIS_PORT, 10),
      maxRetries: parseInt(process.env.REDIS_MAX_RETRIES, 10),
      auth: process.env.REDIS_AUTH,
      db: parseInt(process.env.REDIS_DB, 10),
      autoConnect: boolFromString(process.env.REDIS_AUTO_CONNECT),
      doNotSetClientName: boolFromString(process.env.REDIS_DONT_SET_CLIENT_NAME),
      doNotRunQuitOnEnd: boolFromString(process.env.REDIS_DONT_RUN_QUIT_ON_END),
      reconnectTimeout: parseInt(process.env.REDIS_RECONNECT_TIMEOUT, 10),
      connectTimeout: parseInt(process.env.REDIS_CONNECT_TIMEOUT, 10),
    };

    globalThis.redisClientConfig = {
      socket: {
        port: globalThis.redisOpts.port,
        host: globalThis.redisOpts.host,
        family: 4,
        path: null,
        connectTimeout: 1000,
        noDelay: true,
        keepAlive: true,
        tls: false,
        reconnectStrategy: (retries) => Math.min(retries * 50, 1000),
      },
      username: '',
      password: '',
      name: '',
      database: '',
      modules: [],
      scripts: {},
      functions: [],
      commandsQueueMaxLength: 0,
      disableOfflineQueue: false,
      readonly: false,
      legacyMode: false,
      isolationPoolOptions: {},
      pingInterval: 0,
    };
  });

  after(async () => {
    const client = createClient(globalThis.redisClientConfig);
    await client.connect();
    await client.unlink(global.redisKeysToClean.join(','));
    await client.quit();
  });

  // eslint-disable-next-line no-async-promise-executor
  it(`should write to "${sinkStream}" stream`, () => new Promise(async (ok, fail) => {
    const client = createClient(globalThis.redisClientConfig);

    const message = {
      server_id: randomUUID(),
      client_id: randomUUID(),
    };
    const options = {
      NOMKSTREAM: false,
      TRIM: {
        strategy: 'MAXLEN',
        strategyModifier: '~',
        threshold: 1000,
        limit: 1000,
      },

    };
    const AUTOGENERATED_ID = '*';

    await client.connect();
    //
    try {
      await client.xAdd(sinkStream, AUTOGENERATED_ID, message, options);
    } catch (err) {
      fail(err);
    }
    //
    await client.quit();

    ok();
  }));
});
